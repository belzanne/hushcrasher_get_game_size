#!/usr/bin/env python3
"""
Scraper pour r√©cup√©rer les tailles des jeux Steam et les stocker dans DuckDB
"""

import steam.monkey
steam.monkey.patch_minimal()

import os
import time
import random
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional
import duckdb
from steam.client import SteamClient
from steam.client.cdn import CDNClient
from gevent import sleep
from dotenv import load_dotenv

# Charger les variables d'environnement depuis .env
load_dotenv()

# Configuration depuis les variables d'environnement
STEAM_DB_PATH = os.getenv('STEAM_DB_PATH')
GAME_SIZES_DB_PATH = os.getenv('GAME_SIZES_DB_PATH')
BATCH_SIZE = 200
MAX_RETRIES = 2

class SteamGameSizesToDuckDB:
    def __init__(self):
        self.setup_logging()
        self.setup_database()
        self.client = None
        self.cdn = None
        self.logger.info("üöÄ Steam Game Sizes to DuckDB initialis√©")
    
    def setup_logging(self):
        """Configuration du syst√®me de logging"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        log_filename = log_dir / f"steam_game_sizes_duckdb.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"üìù Logging configur√© - Fichier: {log_filename}")
    
    def setup_database(self):
        """Configuration de la base de donn√©es DuckDB"""
        try:
            # Cr√©er la base de donn√©es si elle n'existe pas
            self.db_conn = duckdb.connect(GAME_SIZES_DB_PATH)
            
            # Cr√©er la table des tailles de jeux si elle n'existe pas
            create_table_query = """
            CREATE TABLE IF NOT EXISTS game_sizes (
                app_id INTEGER,
                depot_id INTEGER,
                disk_size BIGINT,
                download_size BIGINT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (app_id, depot_id)
            )
            """
            
            self.db_conn.execute(create_table_query)
            
            # Cr√©er la table des app_id √©chou√©s si elle n'existe pas
            create_failed_table_query = """
            CREATE TABLE IF NOT EXISTS failed_app_ids (
                app_id INTEGER PRIMARY KEY,
                error_count INTEGER DEFAULT 1,
                last_failed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            
            self.db_conn.execute(create_failed_table_query)
            self.logger.info(f"‚úÖ Base de donn√©es configur√©e: {GAME_SIZES_DB_PATH}")
            
            # V√©rifier combien d'AppID ont d√©j√† √©t√© trait√©s
            count_query = "SELECT COUNT(DISTINCT app_id) FROM game_sizes"
            processed_count = self.db_conn.execute(count_query).fetchone()[0]
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la configuration de la base de donn√©es: {e}")
            raise
    
    def connect_to_steam(self):
        """Connexion √† Steam"""
        try:
            self.client = SteamClient()
            self.client.anonymous_login()
            
            while not self.client.logged_on:
                self.client.run_forever()
                sleep(1)
            
            self.cdn = CDNClient(self.client)
            self.logger.info("‚úÖ Connexion √† Steam √©tablie")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur de connexion Steam: {e}")
            return False
    
    def disconnect_from_steam(self):
        """D√©connexion de Steam"""
        try:
            if self.client:
                self.client.logout()
                self.logger.info("üîå D√©connexion de Steam effectu√©e")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur de d√©connexion: {e}")
    
    def get_app_ids(self, limit: Optional[int] = None) -> List[int]:
        """R√©cup√©ration des app_id depuis la base de donn√©es Steam"""
        try:
            # R√©cup√©rer tous les AppID depuis la base Steam
            steam_conn = duckdb.connect(STEAM_DB_PATH)
            steam_query = "SELECT DISTINCT app_id FROM app_details WHERE app_id IS NOT NULL ORDER BY app_id"
            if limit:
                steam_query += f" LIMIT {limit}"
            
            steam_result = steam_conn.execute(steam_query).fetchall()
            all_app_ids = [row[0] for row in steam_result]
            steam_conn.close()
            
            # R√©cup√©rer les AppID d√©j√† trait√©s depuis game_sizes
            if os.path.exists(GAME_SIZES_DB_PATH):
                game_sizes_conn = duckdb.connect(GAME_SIZES_DB_PATH)
                processed_query = "SELECT DISTINCT app_id FROM game_sizes"
                processed_result = game_sizes_conn.execute(processed_query).fetchall()
                processed_app_ids = set(row[0] for row in processed_result)
                
                # R√©cup√©rer les AppID qui ont √©chou√©
                failed_query = "SELECT app_id FROM failed_app_ids"
                failed_result = game_sizes_conn.execute(failed_query).fetchall()
                failed_app_ids = set(row[0] for row in failed_result)
                
                game_sizes_conn.close()
            else:
                processed_app_ids = set()
                failed_app_ids = set()
            
            # Filtrer les AppID non trait√©s et non √©chou√©s
            app_ids = [app_id for app_id in all_app_ids if app_id not in processed_app_ids and app_id not in failed_app_ids]
            
            self.logger.info(f"üìä R√©cup√©r√© {len(app_ids)} app_id non trait√©s depuis la base de donn√©es")
            self.logger.info(f"üìä Exclus: {len(processed_app_ids)} d√©j√† trait√©s, {len(failed_app_ids)} √©chou√©s pr√©c√©demment")
            return app_ids
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des app_id: {e}")
            raise
    
    def get_game_size_info(self, app_id: int) -> Optional[List[Dict]]:
        """R√©cup√©ration des informations de taille pour un AppID"""
        for attempt in range(MAX_RETRIES):
            try:
                depot_info = self.cdn.get_app_depot_info(app_id)
                
                if not depot_info:
                    return None
                
                depot_data_list = []
                
                for depot_id, depot_data in depot_info.items():
                    if isinstance(depot_data, dict) and 'manifests' in depot_data:
                        manifests = depot_data.get('manifests', {})
                        if 'public' in manifests:
                            public_manifest = manifests['public']
                            disk_size = int(public_manifest.get('size', 0))
                            download_size = int(public_manifest.get('download', 0))
                            
                            if disk_size > 0:
                                depot_data_list.append({
                                    'app_id': app_id,
                                    'depot_id': depot_id,
                                    'disk_size': disk_size,
                                    'download_size': download_size
                                })
                
                return depot_data_list if depot_data_list else None
                
            except Exception as e:
                #self.logger.warning(f"‚ö†Ô∏è Erreur pour app_id {app_id} (tentative {attempt + 1}): {e}")
                
                if attempt < MAX_RETRIES - 1:
                    # D√©lai seulement lors des tentatives de retry (0.5 √† 1.5 sec)
                    delay = random.uniform(0.5, 1.5)
                    time.sleep(delay)
        
        self.logger.error(f"‚ùå √âchec pour app_id {app_id} apr√®s {MAX_RETRIES} tentatives")
        self.record_failed_app_id(app_id)
        return None
    
    def record_failed_app_id(self, app_id: int):
        """Enregistre un app_id qui a √©chou√© dans la base de donn√©es"""
        try:
            # Utiliser INSERT OR REPLACE pour mettre √† jour le compteur d'erreurs
            insert_query = """
            INSERT OR REPLACE INTO failed_app_ids (app_id, error_count, last_failed_at)
            VALUES (?, 
                    COALESCE((SELECT error_count FROM failed_app_ids WHERE app_id = ?), 0) + 1,
                    CURRENT_TIMESTAMP)
            """
            
            self.db_conn.execute(insert_query, (app_id, app_id))
            self.db_conn.commit()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'enregistrement de l'app_id √©chou√© {app_id}: {e}")
    
    def save_batch_to_db(self, batch_data: List[Dict]):
        """Sauvegarde d'un batch de donn√©es dans DuckDB"""
        try:
            if not batch_data:
                return
            
            # Pr√©parer les donn√©es pour l'insertion
            data_to_insert = []
            for item in batch_data:
                data_to_insert.append((
                    item['app_id'],
                    item['depot_id'],
                    item['disk_size'],
                    item['download_size']
                ))
            
            # Insertion avec gestion des doublons (ON CONFLICT DO NOTHING)
            insert_query = """
            INSERT OR IGNORE INTO game_sizes (app_id, depot_id, disk_size, download_size)
            VALUES (?, ?, ?, ?)
            """
            
            self.db_conn.executemany(insert_query, data_to_insert)
            self.db_conn.commit()
            
            self.logger.info(f"üíæ Batch sauvegard√©: {len(batch_data)} enregistrements")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la sauvegarde du batch: {e}")
            raise
    
    def scrape_batch(self, app_ids: List[int], batch_number: int):
        """Scraping d'un batch d'app_id"""
        batch_data = []
        successful = 0
        failed = 0
        
        self.logger.info(f"üöÄ D√©but du scraping du batch {batch_number} ({len(app_ids)} app_id)")
        
        for i, app_id in enumerate(app_ids, 1):
            try:
                depot_info = self.get_game_size_info(app_id)
                
                if depot_info:
                    batch_data.extend(depot_info)
                    successful += 1
                    
                    total_size = sum(item['disk_size'] for item in depot_info)
                    self.logger.debug(f"‚úÖ AppID {app_id}: {len(depot_info)} d√©p√¥ts, {total_size / (1024**3):.2f} GB")
                else:
                    failed += 1
                
                # Pas de d√©lai entre les requ√™tes normales pour optimiser la vitesse
                
                # Log de progression
                if i % 50 == 0 or i == len(app_ids):
                    self.logger.info(f"üìä Batch {batch_number} - Progression: {i}/{len(app_ids)} ({successful} succ√®s, {failed} √©checs)")
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur inattendue pour app_id {app_id}: {e}")
                failed += 1
        
        # Sauvegarder le batch dans la base de donn√©es
        if batch_data:
            self.save_batch_to_db(batch_data)
        
        self.logger.info(f"‚úÖ Batch {batch_number} termin√©: {successful} succ√®s, {failed} √©checs")
        return successful, failed
    
    def run(self, limit: Optional[int] = None):
        """Ex√©cution principale du scraper"""
        try:
            # Connexion √† Steam
            if not self.connect_to_steam():
                return
            
            # R√©cup√©ration des app_id non trait√©s
            app_ids = self.get_app_ids(limit)
            
            if not app_ids:
                self.logger.info("üéâ Tous les AppID ont d√©j√† √©t√© trait√©s !")
                return
            
            # Division en batches
            batches = [app_ids[i:i + BATCH_SIZE] for i in range(0, len(app_ids), BATCH_SIZE)]
            
            self.logger.info(f"üéØ D√©but du scraping: {len(app_ids)} app_id r√©partis en {len(batches)} batches")
            
            total_successful = 0
            total_failed = 0
            
            for batch_number, batch_app_ids in enumerate(batches, 1):
                try:
                    successful, failed = self.scrape_batch(batch_app_ids, batch_number)
                    total_successful += successful
                    total_failed += failed
                    
                    # Pause entre les batches
                    if batch_number < len(batches):
                        pause_duration = random.uniform(0.2, 1)
                        self.logger.info(f"‚è∏Ô∏è Pause entre batches de {pause_duration:.1f}s")
                        time.sleep(pause_duration)
                
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur lors du traitement du batch {batch_number}: {e}")
                    total_failed += len(batch_app_ids)
            
            # R√©sum√© final
            self.logger.info(f"üéâ Scraping termin√©!")
            self.logger.info(f"üìä R√©sum√©: {total_successful} succ√®s, {total_failed} √©checs")
            
            # Statistiques finales
            stats_query = "SELECT COUNT(DISTINCT app_id), COUNT(*) FROM game_sizes"
            stats = self.db_conn.execute(stats_query).fetchone()
            self.logger.info(f"üìà Total dans la base: {stats[0]} AppID, {stats[1]} d√©p√¥ts")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fatale lors du scraping: {e}")
            raise
        finally:
            self.disconnect_from_steam()
            if hasattr(self, 'db_conn'):
                self.db_conn.close()

def main():
    """Fonction principale"""
    import argparse
    import random
    
    parser = argparse.ArgumentParser(description="Scraper Steam pour les tailles des jeux vers DuckDB")
    parser.add_argument("--limit", type=int, help="Limiter le nombre d'app_id √† traiter")
    parser.add_argument("--test", action="store_true", help="Mode test avec seulement 10 app_id")
    
    args = parser.parse_args()
    
    # Mode test
    if args.test:
        args.limit = 10
    
    scraper = SteamGameSizesToDuckDB()
    scraper.run(limit=args.limit)

if __name__ == "__main__":
    main()
